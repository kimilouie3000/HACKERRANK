using System;
using System.Linq;

class Solution
{
    static string gridChallenge(string[] grid)
    {
        int n = grid.Length;

        // Step 1: Sort each row
        for (int i = 0; i < n; i++)
        {
            char[] chars = grid[i].ToCharArray();
            Array.Sort(chars);
            grid[i] = new string(chars);
        }

        // Step 2: Check columns
        for (int col = 0; col < grid[0].Length; col++)
        {
            for (int row = 1; row < n; row++)
            {
                if (grid[row][col] < grid[row - 1][col])
                {
                    return "NO";
                }
            }
        }

        return "YES";
    }

    static void Main()
    {
        int t = int.Parse(Console.ReadLine()); // number of test cases
        for (int tc = 0; tc < t; tc++)
        {
            int n = int.Parse(Console.ReadLine()); // grid size
            string[] grid = new string[n];
            for (int i = 0; i < n; i++)
                grid[i] = Console.ReadLine();

            Console.WriteLine(gridChallenge(grid));
        }
    }
}


using System;
using System.Collections.Generic;

class Solution
{
    static List<string> cavityMap(List<string> grid)
    {
        int n = grid.Count;
        char[,] map = new char[n, n];

        // Copy grid to a 2D char array for easy modification
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                map[i, j] = grid[i][j];
            }
        }

        // Check only non-border cells
        for (int i = 1; i < n - 1; i++)
        {
            for (int j = 1; j < n - 1; j++)
            {
                char cell = grid[i][j];
                if (cell > grid[i - 1][j] &&
                    cell > grid[i + 1][j] &&
                    cell > grid[i][j - 1] &&
                    cell > grid[i][j + 1])
                {
                    map[i, j] = 'X';
                }
            }
        }

        // Convert back to list of strings
        List<string> result = new List<string>();
        for (int i = 0; i < n; i++)
        {
            char[] row = new char[n];
            for (int j = 0; j < n; j++)
                row[j] = map[i, j];
            result.Add(new string(row));
        }

        return result;
    }

    static void Main(string[] args)
    {
        int n = int.Parse(Console.ReadLine());
        List<string> grid = new List<string>();
        for (int i = 0; i < n; i++)
        {
            grid.Add(Console.ReadLine());
        }

        List<string> result = cavityMap(grid);
        foreach (var row in result)
        {
            Console.WriteLine(row);
        }
    }
}
